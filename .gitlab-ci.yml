variables:
  NO_PROXY: "$NO_PROXY,*.telekom.de"
  IMAGE_NAME: canary-bot

stages:
  - test
  - build
  - image
  - container_scan
  - release

include:
  - project: caas/cicd_templates
    file: code_security_scan.yml
  - project: caas/microservice_cicd
    file: container_scan.yml

binary_build:
  stage: build
  image: dockerhub.devops.telekom.de/golang:1.18
  script:
    - go mod download
    - CGO_ENABLED=0 go build -o ./build/cbot .
  cache:
    key: binaries-cache
    paths:
      - build/cbot

image_build:
  stage: image
  tags:
    - otc_run_docker_k8s
  variables:
    IMAGE_REPOSITORY: $DOCKER_REGISTRY/caas/$IMAGE_NAME
  image:
    name: artifactory.devops.telekom.de/gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - export DOCKERFILE_LOCATION=$(find . -name Dockerfile -print -quit)
    - export PRIVATE_GO_SERVER=$(echo ${CI_SERVER_URL} | sed 's/https:\/\///g')
    - |
      KANIKO_PARAMS="--registry-mirror dockerhub.devops.telekom.de
                     --context ${CI_PROJECT_DIR}
                     --destination ${IMAGE_REPOSITORY}:latest
                     --destination ${IMAGE_REPOSITORY}:${CI_PIPELINE_ID}
                     --build-arg http_proxy=${http_proxy}
                     --build-arg https_proxy=${https_proxy}
                     --build-arg no_proxy=${no_proxy}
                     --build-arg CI_USER=gitlab-ci-token
                     --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN}
                     --build-arg PRIVATE_GO_SERVER=${PRIVATE_GO_SERVER}
                     --build-arg DOCKER_BUILD_ENVIRONMENT=${DOCKER_BUILD_ENVIRONMENT}
                     --dockerfile ${DOCKERFILE_LOCATION}
                     --no-push"
      echo "${KANIKO_PARAMS}" | xargs /kaniko/executor

go-test:
  stage: test
  image: dockerhub.devops.telekom.de/golang:1.18
  script:
    - go get gotest.tools/gotestsum
    - go install gotest.tools/gotestsum
    - gotestsum --junitfile report.xml --format standard-verbose -- -coverprofile=cover.out -coverpkg=./... ./...
    - go tool cover -func cover.out | grep total | awk '{print "total-coverage "$3" of statements"}'
  artifacts:
    when: always
    reports:
      junit: report.xml
  coverage: '/total-coverage \d+.\d+% of statements/'

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'