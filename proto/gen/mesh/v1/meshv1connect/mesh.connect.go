// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mesh/v1/mesh.proto

package meshv1connect

import (
	v1 "canary-bot/proto/gen/mesh/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MeshServiceName is the fully-qualified name of the MeshService service.
	MeshServiceName = "mesh.v1.MeshService"
)

// MeshServiceClient is a client for the mesh.v1.MeshService service.
type MeshServiceClient interface {
	JoinMesh(context.Context, *connect_go.Request[v1.JoinMeshRequest]) (*connect_go.Response[v1.JoinMeshResponse], error)
	Ping(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	NodeDiscovery(context.Context, *connect_go.Request[v1.NodeDiscoveryRequest]) (*connect_go.Response[emptypb.Empty], error)
	PushProbes(context.Context, *connect_go.Request[v1.Probes]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMeshServiceClient constructs a client for the mesh.v1.MeshService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMeshServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MeshServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &meshServiceClient{
		joinMesh: connect_go.NewClient[v1.JoinMeshRequest, v1.JoinMeshResponse](
			httpClient,
			baseURL+"/mesh.v1.MeshService/JoinMesh",
			opts...,
		),
		ping: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+"/mesh.v1.MeshService/Ping",
			opts...,
		),
		nodeDiscovery: connect_go.NewClient[v1.NodeDiscoveryRequest, emptypb.Empty](
			httpClient,
			baseURL+"/mesh.v1.MeshService/NodeDiscovery",
			opts...,
		),
		pushProbes: connect_go.NewClient[v1.Probes, emptypb.Empty](
			httpClient,
			baseURL+"/mesh.v1.MeshService/PushProbes",
			opts...,
		),
	}
}

// meshServiceClient implements MeshServiceClient.
type meshServiceClient struct {
	joinMesh      *connect_go.Client[v1.JoinMeshRequest, v1.JoinMeshResponse]
	ping          *connect_go.Client[emptypb.Empty, emptypb.Empty]
	nodeDiscovery *connect_go.Client[v1.NodeDiscoveryRequest, emptypb.Empty]
	pushProbes    *connect_go.Client[v1.Probes, emptypb.Empty]
}

// JoinMesh calls mesh.v1.MeshService.JoinMesh.
func (c *meshServiceClient) JoinMesh(ctx context.Context, req *connect_go.Request[v1.JoinMeshRequest]) (*connect_go.Response[v1.JoinMeshResponse], error) {
	return c.joinMesh.CallUnary(ctx, req)
}

// Ping calls mesh.v1.MeshService.Ping.
func (c *meshServiceClient) Ping(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.ping.CallUnary(ctx, req)
}

// NodeDiscovery calls mesh.v1.MeshService.NodeDiscovery.
func (c *meshServiceClient) NodeDiscovery(ctx context.Context, req *connect_go.Request[v1.NodeDiscoveryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.nodeDiscovery.CallUnary(ctx, req)
}

// PushProbes calls mesh.v1.MeshService.PushProbes.
func (c *meshServiceClient) PushProbes(ctx context.Context, req *connect_go.Request[v1.Probes]) (*connect_go.Response[emptypb.Empty], error) {
	return c.pushProbes.CallUnary(ctx, req)
}

// MeshServiceHandler is an implementation of the mesh.v1.MeshService service.
type MeshServiceHandler interface {
	JoinMesh(context.Context, *connect_go.Request[v1.JoinMeshRequest]) (*connect_go.Response[v1.JoinMeshResponse], error)
	Ping(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	NodeDiscovery(context.Context, *connect_go.Request[v1.NodeDiscoveryRequest]) (*connect_go.Response[emptypb.Empty], error)
	PushProbes(context.Context, *connect_go.Request[v1.Probes]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMeshServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMeshServiceHandler(svc MeshServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mesh.v1.MeshService/JoinMesh", connect_go.NewUnaryHandler(
		"/mesh.v1.MeshService/JoinMesh",
		svc.JoinMesh,
		opts...,
	))
	mux.Handle("/mesh.v1.MeshService/Ping", connect_go.NewUnaryHandler(
		"/mesh.v1.MeshService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/mesh.v1.MeshService/NodeDiscovery", connect_go.NewUnaryHandler(
		"/mesh.v1.MeshService/NodeDiscovery",
		svc.NodeDiscovery,
		opts...,
	))
	mux.Handle("/mesh.v1.MeshService/PushProbes", connect_go.NewUnaryHandler(
		"/mesh.v1.MeshService/PushProbes",
		svc.PushProbes,
		opts...,
	))
	return "/mesh.v1.MeshService/", mux
}

// UnimplementedMeshServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMeshServiceHandler struct{}

func (UnimplementedMeshServiceHandler) JoinMesh(context.Context, *connect_go.Request[v1.JoinMeshRequest]) (*connect_go.Response[v1.JoinMeshResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mesh.v1.MeshService.JoinMesh is not implemented"))
}

func (UnimplementedMeshServiceHandler) Ping(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mesh.v1.MeshService.Ping is not implemented"))
}

func (UnimplementedMeshServiceHandler) NodeDiscovery(context.Context, *connect_go.Request[v1.NodeDiscoveryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mesh.v1.MeshService.NodeDiscovery is not implemented"))
}

func (UnimplementedMeshServiceHandler) PushProbes(context.Context, *connect_go.Request[v1.Probes]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mesh.v1.MeshService.PushProbes is not implemented"))
}
