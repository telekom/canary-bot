// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/api.proto

package apiv1connect

import (
	v1 "canary-bot/proto/api/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "api.v1.ApiService"
)

// ApiServiceClient is a client for the api.v1.ApiService service.
type ApiServiceClient interface {
	ListSamples(context.Context, *connect_go.Request[v1.ListSampleRequest]) (*connect_go.Response[v1.ListSampleResponse], error)
	ListNodes(context.Context, *connect_go.Request[v1.ListNodesRequest]) (*connect_go.Response[v1.ListNodesResponse], error)
}

// NewApiServiceClient constructs a client for the api.v1.ApiService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiServiceClient{
		listSamples: connect_go.NewClient[v1.ListSampleRequest, v1.ListSampleResponse](
			httpClient,
			baseURL+"/api.v1.ApiService/ListSamples",
			opts...,
		),
		listNodes: connect_go.NewClient[v1.ListNodesRequest, v1.ListNodesResponse](
			httpClient,
			baseURL+"/api.v1.ApiService/ListNodes",
			opts...,
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	listSamples *connect_go.Client[v1.ListSampleRequest, v1.ListSampleResponse]
	listNodes   *connect_go.Client[v1.ListNodesRequest, v1.ListNodesResponse]
}

// ListSamples calls api.v1.ApiService.ListSamples.
func (c *apiServiceClient) ListSamples(ctx context.Context, req *connect_go.Request[v1.ListSampleRequest]) (*connect_go.Response[v1.ListSampleResponse], error) {
	return c.listSamples.CallUnary(ctx, req)
}

// ListNodes calls api.v1.ApiService.ListNodes.
func (c *apiServiceClient) ListNodes(ctx context.Context, req *connect_go.Request[v1.ListNodesRequest]) (*connect_go.Response[v1.ListNodesResponse], error) {
	return c.listNodes.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the api.v1.ApiService service.
type ApiServiceHandler interface {
	ListSamples(context.Context, *connect_go.Request[v1.ListSampleRequest]) (*connect_go.Response[v1.ListSampleResponse], error)
	ListNodes(context.Context, *connect_go.Request[v1.ListNodesRequest]) (*connect_go.Response[v1.ListNodesResponse], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.ApiService/ListSamples", connect_go.NewUnaryHandler(
		"/api.v1.ApiService/ListSamples",
		svc.ListSamples,
		opts...,
	))
	mux.Handle("/api.v1.ApiService/ListNodes", connect_go.NewUnaryHandler(
		"/api.v1.ApiService/ListNodes",
		svc.ListNodes,
		opts...,
	))
	return "/api.v1.ApiService/", mux
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) ListSamples(context.Context, *connect_go.Request[v1.ListSampleRequest]) (*connect_go.Response[v1.ListSampleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.ApiService.ListSamples is not implemented"))
}

func (UnimplementedApiServiceHandler) ListNodes(context.Context, *connect_go.Request[v1.ListNodesRequest]) (*connect_go.Response[v1.ListNodesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.ApiService.ListNodes is not implemented"))
}
