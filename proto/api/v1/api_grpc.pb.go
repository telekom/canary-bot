// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/api.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleServiceClient interface {
	ListSamples(ctx context.Context, in *ListSampleRequest, opts ...grpc.CallOption) (SampleService_ListSamplesClient, error)
}

type sampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleServiceClient(cc grpc.ClientConnInterface) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) ListSamples(ctx context.Context, in *ListSampleRequest, opts ...grpc.CallOption) (SampleService_ListSamplesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[0], "/api.v1.SampleService/ListSamples", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceListSamplesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_ListSamplesClient interface {
	Recv() (*Sample, error)
	grpc.ClientStream
}

type sampleServiceListSamplesClient struct {
	grpc.ClientStream
}

func (x *sampleServiceListSamplesClient) Recv() (*Sample, error) {
	m := new(Sample)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleServiceServer is the server API for SampleService service.
// All implementations must embed UnimplementedSampleServiceServer
// for forward compatibility
type SampleServiceServer interface {
	ListSamples(*ListSampleRequest, SampleService_ListSamplesServer) error
	mustEmbedUnimplementedSampleServiceServer()
}

// UnimplementedSampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (UnimplementedSampleServiceServer) ListSamples(*ListSampleRequest, SampleService_ListSamplesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSamples not implemented")
}
func (UnimplementedSampleServiceServer) mustEmbedUnimplementedSampleServiceServer() {}

// UnsafeSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleServiceServer will
// result in compilation errors.
type UnsafeSampleServiceServer interface {
	mustEmbedUnimplementedSampleServiceServer()
}

func RegisterSampleServiceServer(s grpc.ServiceRegistrar, srv SampleServiceServer) {
	s.RegisterService(&SampleService_ServiceDesc, srv)
}

func _SampleService_ListSamples_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSampleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).ListSamples(m, &sampleServiceListSamplesServer{stream})
}

type SampleService_ListSamplesServer interface {
	Send(*Sample) error
	grpc.ServerStream
}

type sampleServiceListSamplesServer struct {
	grpc.ServerStream
}

func (x *sampleServiceListSamplesServer) Send(m *Sample) error {
	return x.ServerStream.SendMsg(m)
}

// SampleService_ServiceDesc is the grpc.ServiceDesc for SampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSamples",
			Handler:       _SampleService_ListSamples_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/api.proto",
}
